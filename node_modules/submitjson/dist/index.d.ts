interface SubmitJSONConfig {
    apiKey: string;
    endpoint?: string;
    options?: SubmitOptions;
}
interface SubmitOptions {
    emailNotification?: boolean;
    emailTo?: string;
    emailSubject?: string;
    emailReplyTo?: string;
    emailBranding?: boolean;
    submissionFormat?: 'raw' | 'pretty';
    submissionSound?: 'none' | 'beep' | 'blip' | 'block' | 'coin' | 'ding' | 'dink' | 'honk' | 'jump' | 'ping' | 'pong' | 'snare';
    recaptchaToken?: string;
    turnstileToken?: string;
}
declare class SubmitJSON {
    private apiKey;
    private endpointSlug;
    private options;
    constructor(config: SubmitJSONConfig);
    private getHeaders;
    submit(data: Record<string, unknown> | FormData | string, options?: SubmitOptions | string, endpoint?: string): Promise<{
        createdAt?: string | undefined;
        data?: Record<string, never> | undefined;
        emailBranding?: boolean | undefined;
        emailNotification?: boolean | undefined;
        emailTo?: string | null | undefined;
        emailReplyTo?: string | null | undefined;
        emailStatus?: string | null | undefined;
        emailSubject?: string | undefined;
        endpointId?: string | undefined;
        endpointName?: string | undefined;
        endpointSlug?: string | undefined;
        seenAt?: string | null | undefined;
        securityCaptcha?: "hcaptcha" | "recaptcha" | "turnstile" | undefined;
        securityCors?: boolean | undefined;
        securityHoneypot?: boolean | undefined;
        submissionFormat?: "raw" | "pretty" | undefined;
        submissionId?: string | undefined;
        submissionSound?: string | undefined;
        userId?: string | undefined;
        webhookStatus?: "error" | "success" | "partial-success" | undefined;
        zapierStatus?: "error" | "success" | "pending" | undefined;
    } | undefined>;
}

export { SubmitJSON as default };
