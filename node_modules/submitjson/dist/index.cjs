"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var submitjson_exports = {};
__export(submitjson_exports, {
  default: () => SubmitJSON
});
module.exports = __toCommonJS(submitjson_exports);
var import_openapi_fetch = __toESM(require("openapi-fetch"), 1);
var { POST } = (0, import_openapi_fetch.default)({
  baseUrl: "https://api.submitjson.com/"
});
var SubmitJSON = class {
  apiKey;
  endpointSlug;
  options;
  constructor(config) {
    this.apiKey = config.apiKey;
    this.endpointSlug = config.endpoint;
    this.options = config.options;
  }
  getHeaders() {
    return {
      "X-API-Key": this.apiKey
    };
  }
  async submit(data, options, endpoint) {
    try {
      let d;
      if (data instanceof FormData) {
        JSON.stringify(Object.fromEntries(data));
        d = Object.fromEntries(data);
      } else if (typeof data === "string") {
        const s = JSON.parse(data);
        if (typeof s !== "object")
          throw new Error(`\u2620\uFE0F The string you pass in must parse into a valid JSON object e.g. { your: 'string' }`);
        d = s;
      } else if (typeof data === "object") {
        JSON.stringify(data);
        d = data;
      } else {
        throw new TypeError("\u2620\uFE0F The first argument must be a valid JSON object, string, or FormData");
      }
      if (typeof options === "string")
        endpoint = options;
      const endpointSlug = endpoint || this.endpointSlug;
      if (endpointSlug === void 0)
        throw new Error("\u2620\uFE0F No endpoint defined. Add one to your client configuration or to this submit call.");
      const body = { data: d };
      let o;
      if (typeof this.options === "object")
        o = this.options;
      if (typeof options === "object")
        o ? o = { ...o, ...options } : o = options;
      if (o) {
        const { emailNotification, submissionFormat, submissionSound, emailReplyTo, emailTo, emailSubject, emailBranding } = o;
        const options2 = { emailNotification, submissionFormat, submissionSound, emailReplyTo, emailTo, emailBranding, emailSubject };
        Object.keys(options2).forEach((key) => options2 && options2[key] === void 0 && delete options2[key]);
        if (Object.keys(options2).length > 0)
          body.options = options2;
      }
      const { data: submission, error } = await POST("/v1/submit/{endpointSlug}", {
        headers: this.getHeaders(),
        params: {
          path: { endpointSlug }
        },
        body
      });
      if (error)
        throw new Error(error.message);
      return submission;
    } catch (error) {
      console.error(error);
    }
  }
};
