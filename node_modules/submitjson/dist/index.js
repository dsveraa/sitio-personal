// index.ts
import createClient from "openapi-fetch";
var { POST } = createClient({
  baseUrl: "https://api.submitjson.com/"
});
var SubmitJSON = class {
  apiKey;
  endpointSlug;
  options;
  constructor(config) {
    this.apiKey = config.apiKey;
    this.endpointSlug = config.endpoint;
    this.options = config.options;
  }
  getHeaders() {
    return {
      "X-API-Key": this.apiKey
    };
  }
  async submit(data, options, endpoint) {
    try {
      let d;
      if (data instanceof FormData) {
        JSON.stringify(Object.fromEntries(data));
        d = Object.fromEntries(data);
      } else if (typeof data === "string") {
        const s = JSON.parse(data);
        if (typeof s !== "object")
          throw new Error(`\u2620\uFE0F The string you pass in must parse into a valid JSON object e.g. { your: 'string' }`);
        d = s;
      } else if (typeof data === "object") {
        JSON.stringify(data);
        d = data;
      } else {
        throw new TypeError("\u2620\uFE0F The first argument must be a valid JSON object, string, or FormData");
      }
      if (typeof options === "string")
        endpoint = options;
      const endpointSlug = endpoint || this.endpointSlug;
      if (endpointSlug === void 0)
        throw new Error("\u2620\uFE0F No endpoint defined. Add one to your client configuration or to this submit call.");
      const body = { data: d };
      let o;
      if (typeof this.options === "object")
        o = this.options;
      if (typeof options === "object")
        o ? o = { ...o, ...options } : o = options;
      if (o) {
        const { emailNotification, submissionFormat, submissionSound, emailReplyTo, emailTo, emailSubject, emailBranding } = o;
        const options2 = { emailNotification, submissionFormat, submissionSound, emailReplyTo, emailTo, emailBranding, emailSubject };
        Object.keys(options2).forEach((key) => options2 && options2[key] === void 0 && delete options2[key]);
        if (Object.keys(options2).length > 0)
          body.options = options2;
      }
      const { data: submission, error } = await POST("/v1/submit/{endpointSlug}", {
        headers: this.getHeaders(),
        params: {
          path: { endpointSlug }
        },
        body
      });
      if (error)
        throw new Error(error.message);
      return submission;
    } catch (error) {
      console.error(error);
    }
  }
};
export {
  SubmitJSON as default
};
